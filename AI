import requests
import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import json

# Load environment variables
load_dotenv()
API_KEY = os.getenv('OPENWEATHER_API_KEY')

class WeatherPredictor:
    def __init__(self):
        self.model = DecisionTreeClassifier(random_state=42)
        self.data = []
    
    def get_current_location(self):
        """Get current location based on IP address"""
        try:
            # Add timeout and headers to improve reliability
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get('https://ipapi.co/json/', 
                                  timeout=5,
                                  headers=headers)
            response.raise_for_status()  # Raise exception for bad status codes
            data = response.json()
            
            if 'error' in data:
                raise Exception(f"API Error: {data['error']}")
                
            return {
                'city': data.get('city', 'London'),  # Default to London if city not found
                'lat': data.get('latitude', 51.5074),
                'lon': data.get('longitude', -0.1278)
            }
        except Exception as e:
            print(f"Error getting location: {e}")
            # Return default location (London) as fallback
            return {
                'city': 'London',
                'lat': 51.5074,
                'lon': -0.1278
            }

    def get_location_input(self):
        """Get location manually from user input"""
        print("\nEnter your location details:")
        city = input("City name: ")
        lat = float(input("Latitude (e.g. 51.5074 for London): "))
        lon = float(input("Longitude (e.g. -0.1278 for London): "))
        return {'city': city, 'lat': lat, 'lon': lon}
        
    def predict_from_gps(self, lat, lon):
        """Predict weather using GPS coordinates"""
        try:
            # Get weather data for the GPS location
            location = {
                'lat': lat,
                'lon': lon
            }
            
            # Get current weather data
            weather_data = self.fetch_weather_data(location)
            if not weather_data:
                raise Exception("Failed to fetch weather data")
            
            # Train model with historical data for this location
            self.collect_training_data(location)
            if not self.train_model():
                raise Exception("Failed to train model")
            
            # Make prediction
            will_rain = self.predict_rain(
                weather_data['temperature'],
                weather_data['humidity'],
                weather_data['pressure']
            )
            
            return {
                'current': weather_data,
                'prediction': will_rain
            }
            
        except Exception as e:
            print(f"Error in prediction: {e}")
            return None
    
    def fetch_weather_data(self, location):
        """Fetch weather data from OpenWeatherMap API using coordinates"""
        base_url = "http://api.openweathermap.org/data/2.5/weather"
        params = {
            'lat': location['lat'],
            'lon': location['lon'],
            'appid': API_KEY,
            'units': 'metric'
        }
        
        try:
            response = requests.get(base_url, params=params)
            data = response.json()
            
            return {
                'temperature': data['main']['temp'],
                'humidity': data['main']['humidity'],
                'pressure': data['main']['pressure'],
                'rain': 1 if 'rain' in data else 0
            }
        except Exception as e:
            print(f"Error fetching data: {e}")
            return None

    def collect_training_data(self, location):
        """Collect historical weather data for training"""
        try:
            # Collect last 5 days of weather data
            end_date = datetime.now()
            start_date = end_date - timedelta(days=5)
            
            base_url = "http://api.openweathermap.org/data/2.5/onecall/timemachine"
            
            historical_data = []
            current_date = start_date
            
            while current_date <= end_date:
                params = {
                    'lat': location['lat'],
                    'lon': location['lon'],
                    'dt': int(current_date.timestamp()),
                    'appid': API_KEY,
                    'units': 'metric'
                }
                
                response = requests.get(base_url, params=params)
                data = response.json()
                
                if 'current' in data:
                    weather = data['current']
                    historical_data.append({
                        'temperature': weather['temp'],
                        'humidity': weather['humidity'],
                        'pressure': weather['pressure'],
                        'rain': 1 if 'rain' in weather else 0
                    })
                
                current_date += timedelta(days=1)
            
            self.data = historical_data
            return True
            
        except Exception as e:
            print(f"Error collecting training data: {e}")
            return False

    def train_model(self):
        """Train the weather prediction model"""
        try:
            if not self.data:
                return False
                
            df = pd.DataFrame(self.data)
            X = df[['temperature', 'humidity', 'pressure']]
            y = df['rain']
            
            self.model.fit(X, y)
            return True
            
        except Exception as e:
            print(f"Error training model: {e}")
            return False

    def predict_rain(self, temperature, humidity, pressure):
        """Predict if it will rain based on current conditions"""
        try:
            prediction = self.model.predict([[temperature, humidity, pressure]])
            return bool(prediction[0])
        except Exception as e:
            print(f"Error making prediction: {e}")
            return False

def main():
    if not API_KEY:
        print("Please set your OpenWeatherMap API key in the .env file")
        return
    
    # Add command line argument parsing
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--lat', type=float, required=True)
    parser.add_argument('--lon', type=float, required=True)
    args = parser.parse_args()
    
    predictor = WeatherPredictor()
    
    # Use provided coordinates
    result = predictor.predict_from_gps(args.lat, args.lon)
    
    if result:
        # Return JSON formatted output
        print(json.dumps(result))
    else:
        print(json.dumps({'error': 'Failed to predict weather'}))

if __name__ == "__main__":
    main()