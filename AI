import requests
import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
API_KEY = os.getenv('OPENWEATHER_API_KEY')

class WeatherPredictor:
    def __init__(self):
        self.model = DecisionTreeClassifier(random_state=42)
        self.data = []
    
    def get_current_location(self):
        """Get current location based on IP address"""
        try:
            # Add timeout and headers to improve reliability
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get('https://ipapi.co/json/', 
                                  timeout=5,
                                  headers=headers)
            response.raise_for_status()  # Raise exception for bad status codes
            data = response.json()
            
            if 'error' in data:
                raise Exception(f"API Error: {data['error']}")
                
            return {
                'city': data.get('city', 'London'),  # Default to London if city not found
                'lat': data.get('latitude', 51.5074),
                'lon': data.get('longitude', -0.1278)
            }
        except Exception as e:
            print(f"Error getting location: {e}")
            # Return default location (London) as fallback
            return {
                'city': 'London',
                'lat': 51.5074,
                'lon': -0.1278
            }

    def get_location_input(self):
        """Get location manually from user input"""
        print("\nEnter your location details:")
        city = input("City name: ")
        lat = float(input("Latitude (e.g. 51.5074 for London): "))
        lon = float(input("Longitude (e.g. -0.1278 for London): "))
        return {'city': city, 'lat': lat, 'lon': lon}
        
    def fetch_weather_data(self, location):
        """Fetch weather data from OpenWeatherMap API using coordinates"""
        base_url = "http://api.openweathermap.org/data/2.5/weather"
        params = {
            'lat': location['lat'],
            'lon': location['lon'],
            'appid': API_KEY,
            'units': 'metric'
        }
        
        try:
            response = requests.get(base_url, params=params)
            data = response.json()
            
            return {
                'temperature': data['main']['temp'],
                'humidity': data['main']['humidity'],
                'pressure': data['main']['pressure'],
                'rain': 1 if 'rain' in data else 0
            }
        except Exception as e:
            print(f"Error fetching data: {e}")
            return None
    
    # ... existing code for collect_training_data, train_model, and predict_rain ...

def main():
    if not API_KEY:
        print("Please set your OpenWeatherMap API key in the .env file")
        return
    
    predictor = WeatherPredictor()
    
    # Try automatic location detection first
    location = predictor.get_current_location()
    if not location:
        print("Automatic location detection failed.")
        try:
            location = predictor.get_location_input()
        except ValueError:
            print("Invalid input. Using default location (London)")
            location = {
                'city': 'London',
                'lat': 51.5074,
                'lon': -0.1278
            }
    
    print(f"Location: {location['city']}")
    
    # Collect training data and train model
    predictor.collect_training_data(location)
    if predictor.train_model():
        # Get current weather and make prediction
        current_weather = predictor.fetch_weather_data(location)
        if current_weather:
            will_rain = predictor.predict_rain(
                current_weather['temperature'],
                current_weather['humidity'],
                current_weather['pressure']
            )
            print(f"\nCurrent weather in {location['city']}:")
            print(f"Temperature: {current_weather['temperature']}Â°C")
            print(f"Humidity: {current_weather['humidity']}%")
            print(f"Pressure: {current_weather['pressure']} hPa")
            print(f"\nPrediction: {'Rain expected' if will_rain else 'No rain expected'}")

if __name__ == "__main__":
    main()